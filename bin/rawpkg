#!/bin/bash
# Author: Levenkov A. Artem
# E-mail: artem@levenkov.org
# Git repo: http://github.com/mcs51/rawpkg.git
# (c) 2016 Artem A. Levenkov

version=0.1.42

tmpfiles=''

do-clean() {
  rm -rf ${tmpfiles}
}

msg-exit() {
  local err=$1
  shift
  echo -e "$@"
  do-clean
  exit "${err}"
}

msg-usage-exit() {
  local err=$1
  shift
  echo -e "$@"
  usage-exit "${err}"
}

usage-exit() {
  usage
  do-clean
  exit "$1"
}

usage() {
  echo -e \
"rawpkg $version\n\
Usage: $0 <command> [command-options]\n\
Commands are: create (c), install (i), uninstall (u, remove), list, help"
}

AR='xz'

ar-ext() {
  eval "echo \${AREXT_${AR}}"
}

ar-c() {
  eval "ar-c-${AR} $@"
}

ar-u() {
  eval "ar-u-${AR} $@"
}

ar-l() {
  eval "ar-l-${AR} $@"
}

AREXT_xz='rp'

ar-c-xz() {
  tar -C $(dirname $1) -caf - $(basename $1) | xz -9 -c >$2
}

ar-u-xz() {
  tar -axvf $1 --strip-components 1
}

ar-l-xz() {
  tar -tf $1
}

rawpkg-create() {
  local pkgdir=$1
  [[ -d "${pkgdir}" ]] || msg-usage-exit 1 "Package directory not found: ${pkgdir}"
  shift

  local outfile=$(basename ${pkgdir}).$(ar-ext)

  if [[ "x$1" == "x-o" ]]; then
    outfile=$2
    shift; shift
  fi

  [[ -n "$@" ]] && msg-usage-exit 1 "Undefined options: $@"

  [[ -z "${outfile}" ]] && usage-exit 1
  [[ -e "${outfile}" && ! -f "${outfile}" ]] && { echo "Output file exists and not regular file: ${outfile}"; return 1; }

  ar-c ${pkgdir} ${outfile} || msg-exit $? "Package ${outfile} creating failure."

  echo "Package ${outfile} created successfully."
}

ensure-dir() {
  mkdir -p $1 >/dev/null 2>&1 || msg-exit 1 "Can't create directory $1"
}

# ----------------------------------------------
# Default option arguments values
#-----------------------------------------------
rootdir='.'
dbdir=".rawpkg"

#-----------------------------------------------
# Functions for parsing common option arguments: 
# ----------------------------------------------

# parse-root() for parsing [ -d root ] 
parse-root()  {
  local code=1
  if [[ "$1" == "-d" ]]; then
    rootdir=${2%/}
    code=0
  fi

  [[ -d "${rootdir}" ]] || msg-usage-exit 1 "Root directory not found: ${rootdir}"
  
  return $code
  
}

# parse-dbdir() for parsing [ --dbdir dbdir ]
parse-dbdir() {
  local code=1
  if [[ "$1" == "--db-dir" ]]; then
    dbdir=${2%/}
    code=0
  else
    echo "DB dir not specified explicitly, using default path: ${dbdir}">&2
  fi 
  return $code 
}

#-----------------------------------------------
# Script Functions:
# ----------------------------------------------
 
# install [ -d root ] [ --dbdir dbdir ] pkgfilepath
rawpkg-install() {
  
  parse-root  $@ && { shift; shift; }
  parse-dbdir $@ && { shift; shift; }
  
  #  pkgfilepath
  local pkgfilepath=$(realpath $1)
  [[ -f "${pkgfilepath}" ]] || msg-usage-exit 1 "Package file path not found: ${pkgfilepath}"
  shift

  local pkgname=$(eval "echo \$(basename \${pkgfilepath%.\$(ar-ext)})")

  
  pushd ${rootdir} >/dev/null &&
  (
    set -e 
    tmpfiles=''

    [[ -d "${dbdir}/pkgs/${pkgname}" ]] && msg-exit 1 "Package ${pkgname} already installed."

    local pkgcontent=$(tempfile)
    tmpfiles+=" ${pkgcontent}"
    (
      ar-l ${pkgfilepath} >${pkgcontent}
      for f in $(cat ${pkgcontent}); do
        f=$(eval "echo \${f#${pkgname}/}")
        [[ -z ${f} ]] && continue
        [[ -e "${f}" && ! -d "${f}" ]] && msg-exit 1 "Conflict: ${f} already exists in root directory!"
      done

      exit 0
    )
    local res=$?
    (( "${res}" == 0 )) || msg-exit ${res}

    ar-u ${pkgfilepath} | sed -e 's,^[^\/]*\/,\/,'| sed 's/^/* installed: /'

    ensure-dir ${dbdir}/pkgs/${pkgname}

    cat ${pkgcontent} | sed -e "s,^${pkgname}/,," | sed -e '/^$/d' >${dbdir}/pkgs/${pkgname}/list

    do-clean
  ) || msg-exit 1 "Installation failed."

  popd >/dev/null

  echo "Package ${pkgname} installed successfully."
}

# list [ -d root ] [ --dbdir dbdir ] [ template ]
rawpkg-list() {

  parse-root  $@ && { shift; shift; }
  parse-dbdir $@ && { shift; shift; }
  
  # pkgdbdir
  local pkgdbdir="${rootdir}/${dbdir}/pkgs/"
  
  [[ -d "$pkgdbdir" ]] || return 1
  
  local pkglist="$(ls $pkgdbdir)"
  [[ -z  $pkglist ]] && return 1
  
  # if template
  if [[ -n "$1" ]]; then
    local template="$1"
    echo "$pkglist" | grep -E $template
  else 
    echo $pkglist    
  fi

  return 0
}


# uninstall [ -d root ] [ --dbdir dbdir ] pkgname
rawpkg-uninstall() {
  
  parse-root  $@ && { shift; shift; }
  parse-dbdir $@ && { shift; shift; }

  # pkgname
  local pkgname=$1
  shift
  
  pushd ${rootdir} >/dev/null &&
  (
    set -e

    local pkgdbdir="${dbdir}/pkgs/${pkgname}"

    [[ -d "${pkgdbdir}" ]] || msg-usage-exit 1 "Package ${pkgname} not installed"

    local pkgfiles=$(cat "${pkgdbdir}/list")
    (
      for f in $(echo "${pkgfiles}" | sed '1!G;h;$!d'); do
        if [[ -d "${f}" ]]; then
          rmdir ${f} >/dev/null 2>&1 && echo -e "* removed directory: \t ${f}"
        else
          rm -f ${f} >/dev/null && echo -e "* removed file: \t ${f}"
        fi
      done

      rm -rf ${pkgdbdir}

      exit 0
    )
    local res=$?
    (( "${res}" == 0 )) || exit ${res}
  ) || msg-exit 1 "Uninstallation failed."

  popd >/dev/null

  echo "Package ${pkgname} uinstalled successfully."
}

help-create() {
  echo -e \
"$0 create <distdir> [ -o <pkgfilename> ]"
}

help-install() {
  echo -e \
"$0 install [ -d root ] [ --dbdir dbdir ] pkgfilepath"
}

help-uninstall() {
  echo -e \
"$0 uninstall [ -d root ] [ --dbdir dbdir ] pkgname"
}

help-list() {
  echo -e \
"$0 list [ -d root ] [ --dbdir dbdir ] [ template ]"
}

rawpkg-help() {
  local cmd=$1

  case "${cmd}" in
    create|c) help-create; ;;
    install|i) help-install; ;;
    uninstall|remove|u) help-uninstall; ;;
    list|l) help-list; ;;
    *) usage; ;;
  esac
}

cmd=$1
shift


case "${cmd}" in
  create|c) rawpkg-create "$@"; ;;
  install|i) rawpkg-install "$@"; ;;
  uninstall|remove|u) rawpkg-uninstall "$@"; ;;
  list|l) rawpkg-list "$@"; ;;
  help|h) rawpkg-help "$@"; ;;
  *) usage-exit 1; ;;
esac

errcode=$?

do-clean

exit $errcode
